---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: kymas.operator.kyma-project.io
spec:
  group: operator.kyma-project.io
  names:
    kind: Kyma
    listKind: KymaList
    plural: kymas
    singular: kyma
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Kyma is the Schema for the kymas API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KymaSpec defines the desired state of Kyma.
            properties:
              channel:
                description: Channel specifies the desired Channel of the Installation,
                  usually targeting different module versions.
                enum:
                - rapid
                - fast
                - regular
                - stable
                type: string
              modules:
                description: Modules specifies the list of modules to be installed
                items:
                  description: Module defines the components to be installed.
                  properties:
                    channel:
                      description: Channel is the desired channel of the Module. If
                        this changes or is set, it will be used to resolve a new ModuleTemplate
                        based on the new resolved resources.
                      enum:
                      - rapid
                      - fast
                      - regular
                      - stable
                      type: string
                    controller:
                      description: ControllerName is able to set the controller used
                        for reconciliation of the module. It can be used together
                        with Cache Configuration on the Operator responsible for the
                        templated Modules to split workload.
                      type: string
                    name:
                      description: "Name is a unique identifier of the module. It
                        is used together with KymaName, ChannelLabel, ProfileLabel
                        label to resolve a ModuleTemplate. \n WARNING: Module-Names
                        are restricted in length based on naming generation strategy!
                        By default, this means that the length of Name and .metadata.name
                        of Kyma combined must be <= 252 Characters This is because
                        the naming strategy aggregates Kyma and Module into a format
                        of \"kyma-name-module-name\" For more info on the 253 total
                        character limit, see https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names"
                      type: string
                  required:
                  - name
                  type: object
                type: array
              sync:
                description: Active Synchronization Settings
                properties:
                  enabled:
                    default: false
                    description: Enabled set to true will look up a kubeconfig for
                      the remote cluster based on the strategy and synchronize its
                      state there.
                    type: boolean
                  moduleCatalog:
                    default: true
                    description: ModuleCatalog set to true will cause a copy of all
                      ModuleTemplate in the cluster to be synchronized for discovery
                      purposes
                    type: boolean
                  namespace:
                    description: The target namespace, if empty the namespace is reflected
                      from the control plane Note that cleanup is currently not supported
                      if you are switching the namespace, so you will manually need
                      to clean up old synchronized Kymas
                    type: string
                  noModuleCopy:
                    default: true
                    description: NoModuleCopy set to true will cause the remote Kyma
                      to be initialized without copying over the module spec of the
                      control plane into the SKR
                    type: boolean
                  strategy:
                    default: secret
                    description: Strategy determines the way to look up the remotely
                      synced kubeconfig, by default it is fetched from a secret
                    type: string
                type: object
            required:
            - channel
            type: object
          status:
            description: KymaStatus defines the observed state of Kyma
            properties:
              activeChannel:
                description: Active Channel
                enum:
                - rapid
                - fast
                - regular
                - stable
                type: string
              conditions:
                description: List of status conditions to indicate the status of a
                  ServiceInstance.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              moduleStatus:
                description: Contains essential information about the current deployed
                  module
                items:
                  properties:
                    generation:
                      description: Generation tracks the active Generation of the
                        Module. In case the tracked Module spec changes, the new Generation
                        will differ from the one tracked in the cluster and thus trigger
                        a reconciliation based on the original content of ModuleTemplate
                      format: int64
                      type: integer
                    moduleName:
                      description: ModuleName is the unique identifier of the module.
                      type: string
                    name:
                      description: Name is the current deployed module name
                      type: string
                    namespace:
                      description: Namespace is the current deployed module namespace
                      type: string
                    state:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - Processing
                      - Deleting
                      - Ready
                      - Error
                      type: string
                    templateInfo:
                      description: It contains information about the last parsed ModuleTemplate
                        in Context of the Installation. This will update when Channel
                        or the ModuleTemplate is changed.
                      properties:
                        channel:
                          description: Channel tracks the active Channel of the ModuleTemplate.
                            In Case it changes, the new Channel will have caused a
                            new lookup to be necessary that maybe picks a different
                            ModuleTemplate, which is why we need to reconcile.
                          enum:
                          - rapid
                          - fast
                          - regular
                          - stable
                          type: string
                        generation:
                          description: Generation tracks the active Generation of
                            the ModuleTemplate. In case it changes, the new Generation
                            will differ from the one tracked in TemplateInfo and thus
                            trigger a new reconciliation with a newly parser ModuleTemplate
                          format: int64
                          type: integer
                        gvk:
                          description: GroupVersionKind is used to track the Kind
                            that was created from the ModuleTemplate. This is dynamic
                            to not bind ourselves to any kind of Kind in the code
                            and allows us to work generic on deletion / cleanup of
                            related resources to a Kyma Installation.
                          properties:
                            group:
                              type: string
                            kind:
                              type: string
                            version:
                              type: string
                          required:
                          - group
                          - kind
                          - version
                          type: object
                        name:
                          description: Name is the current name of the template resource
                            referenced
                          type: string
                        namespace:
                          description: Namespace is the namespace of the template
                          type: string
                        version:
                          type: string
                      required:
                      - name
                      - namespace
                      - version
                      type: object
                  required:
                  - moduleName
                  - name
                  - namespace
                  - state
                  type: object
                type: array
              state:
                description: State signifies current state of Kyma. Value can be one
                  of ("Ready", "Processing", "Error", "Deleting").
                enum:
                - Processing
                - Deleting
                - Ready
                - Error
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
