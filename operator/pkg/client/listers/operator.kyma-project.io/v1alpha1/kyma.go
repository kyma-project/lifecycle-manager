/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kyma-project/lifecycle-manager/operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KymaLister helps list Kymas.
// All objects returned here must be treated as read-only.
type KymaLister interface {
	// List lists all Kymas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Kyma, err error)
	// Kymas returns an object that can list and get Kymas.
	Kymas(namespace string) KymaNamespaceLister
	KymaListerExpansion
}

// kymaLister implements the KymaLister interface.
type kymaLister struct {
	indexer cache.Indexer
}

// NewKymaLister returns a new KymaLister.
func NewKymaLister(indexer cache.Indexer) KymaLister {
	return &kymaLister{indexer: indexer}
}

// List lists all Kymas in the indexer.
func (s *kymaLister) List(selector labels.Selector) (ret []*v1alpha1.Kyma, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kyma))
	})
	return ret, err
}

// Kymas returns an object that can list and get Kymas.
func (s *kymaLister) Kymas(namespace string) KymaNamespaceLister {
	return kymaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KymaNamespaceLister helps list and get Kymas.
// All objects returned here must be treated as read-only.
type KymaNamespaceLister interface {
	// List lists all Kymas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Kyma, err error)
	// Get retrieves the Kyma from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Kyma, error)
	KymaNamespaceListerExpansion
}

// kymaNamespaceLister implements the KymaNamespaceLister
// interface.
type kymaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kymas in the indexer for a given namespace.
func (s kymaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Kyma, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kyma))
	})
	return ret, err
}

// Get retrieves the Kyma from the indexer for a given namespace and name.
func (s kymaNamespaceLister) Get(name string) (*v1alpha1.Kyma, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kyma"), name)
	}
	return obj.(*v1alpha1.Kyma), nil
}
