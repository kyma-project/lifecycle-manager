/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kyma-project/lifecycle-manager/operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModuleTemplateLister helps list ModuleTemplates.
// All objects returned here must be treated as read-only.
type ModuleTemplateLister interface {
	// List lists all ModuleTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModuleTemplate, err error)
	// ModuleTemplates returns an object that can list and get ModuleTemplates.
	ModuleTemplates(namespace string) ModuleTemplateNamespaceLister
	ModuleTemplateListerExpansion
}

// moduleTemplateLister implements the ModuleTemplateLister interface.
type moduleTemplateLister struct {
	indexer cache.Indexer
}

// NewModuleTemplateLister returns a new ModuleTemplateLister.
func NewModuleTemplateLister(indexer cache.Indexer) ModuleTemplateLister {
	return &moduleTemplateLister{indexer: indexer}
}

// List lists all ModuleTemplates in the indexer.
func (s *moduleTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ModuleTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModuleTemplate))
	})
	return ret, err
}

// ModuleTemplates returns an object that can list and get ModuleTemplates.
func (s *moduleTemplateLister) ModuleTemplates(namespace string) ModuleTemplateNamespaceLister {
	return moduleTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ModuleTemplateNamespaceLister helps list and get ModuleTemplates.
// All objects returned here must be treated as read-only.
type ModuleTemplateNamespaceLister interface {
	// List lists all ModuleTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModuleTemplate, err error)
	// Get retrieves the ModuleTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ModuleTemplate, error)
	ModuleTemplateNamespaceListerExpansion
}

// moduleTemplateNamespaceLister implements the ModuleTemplateNamespaceLister
// interface.
type moduleTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ModuleTemplates in the indexer for a given namespace.
func (s moduleTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ModuleTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModuleTemplate))
	})
	return ret, err
}

// Get retrieves the ModuleTemplate from the indexer for a given namespace and name.
func (s moduleTemplateNamespaceLister) Get(name string) (*v1alpha1.ModuleTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("moduletemplate"), name)
	}
	return obj.(*v1alpha1.ModuleTemplate), nil
}
