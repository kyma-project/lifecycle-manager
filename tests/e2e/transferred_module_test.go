package e2e_test

import (
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	"github.com/kyma-project/lifecycle-manager/api/shared"
	"github.com/kyma-project/lifecycle-manager/api/v1beta2"
	. "github.com/kyma-project/lifecycle-manager/pkg/testutils"
	. "github.com/kyma-project/lifecycle-manager/tests/e2e/commontestutils"
	apiappsv1 "k8s.io/api/apps/v1"
	apicorev1 "k8s.io/api/core/v1"
)

// This test verifies that a module transferred to another OCI Registry installs properly on an SKR cluster.
// Specifically, it ensures the following:
// - The Manifest CR is created with the correct localization metadata, where Spec.LocalizedImages contains a list of images to be re-written.
// - Docker image references in Kubernetes objects embedded in the raw-manifest are updated (re-written) according to the localizedImages configured in the Manifest CR.
// - The test uses a manually created Template-Operator module, which was transferred to the "europe-west3-docker.pkg.dev/sap-kyma-jellyfish-dev/restricted-market" registry.
// - The original Docker image references in the module's raw-manifest point to the "europe-docker.pkg.dev/kyma-project/prod/" registry.
var _ = Describe("Module Transferred to Another OCI Registry", Ordered, func() {
	const (
		// These image references were generated by the OCM tooling during module transfer to the "europe-west3-docker.pkg.dev/sap-kyma-jellyfish-dev/restricted-market" registry.
		// Their values should be visible in the Manifest's Spec.LocalizedImages field and in the actual values in the target "template-operator-controller-manager" Deployment in the SKR.
		rewrittenTemplateOperatorImage = "europe-west3-docker.pkg.dev/sap-kyma-jellyfish-dev/restricted-market/kyma-project/prod/template-operator:1.0.3@sha256:e48f087538b17336d6e84c5e276d010158a482ef823f04f296df11c9ca2a047a"
		rewrittenKedaManagerImage      = "europe-west3-docker.pkg.dev/sap-kyma-jellyfish-dev/restricted-market/kyma-project/prod/keda-manager:1.7.0@sha256:43b4efb42a08ffb4d463db4a2d859d22407316a813ff2e45e34437cb218bd143"
		rewrittenTelemetryManagerImage = "europe-west3-docker.pkg.dev/sap-kyma-jellyfish-dev/restricted-market/kyma-project/prod/telemetry-manager:1.43.1@sha256:3d820e3d9e9a5a036cbde12c38ece8805558046de4b190c0cb213e9bab6bec95"
	)

	kyma := NewKymaWithNamespaceName("kyma-sample", ControlPlaneNamespace, v1beta2.DefaultChannel)
	module := NewTemplateOperator(v1beta2.DefaultChannel)
	moduleCR := NewTestModuleCR(RemoteNamespace)

	InitEmptyKymaBeforeAll(kyma)
	CleanupKymaAfterAll(kyma)

	// helper function returning a list of values of all EnvVar defined in the Deployment's first container
	allEnvValuesIn := func(deployment *apiappsv1.Deployment) []string {
		return ToStringList(
			deployment.Spec.Template.Spec.Containers[0].Env,
			func(env apicorev1.EnvVar) string { return env.Value },
		)
	}

	Context("Given SKR Cluster", func() {
		It("When Kyma Module is enabled on SKR Kyma CR", func() {
			Eventually(EnableModule).
				WithContext(ctx).
				WithArguments(skrClient, defaultRemoteKymaName, RemoteNamespace, module).
				Should(Succeed())
		})

		It("Then a Module CR exists", func() {
			Eventually(ModuleCRExists).
				WithContext(ctx).
				WithArguments(skrClient, moduleCR).
				Should(Succeed())

			By("And KCP Kyma CR is in \"Ready\" State")
			Eventually(KymaIsInState).
				WithContext(ctx).
				WithArguments(kyma.GetName(), kyma.GetNamespace(), kcpClient, shared.StateReady).
				Should(Succeed())

			By("And Manifest CR is configured with correct localizedImages")
			manifest, err := GetManifest(ctx, kcpClient, kyma.GetName(), kyma.GetNamespace(), module.Name)
			Expect(err).Should(Succeed())
			Expect(manifest.Spec.LocalizedImages).Should(ConsistOf(
				rewrittenTemplateOperatorImage,
				rewrittenKedaManagerImage,
				rewrittenTelemetryManagerImage,
			))

			By("And Module Operator Deployment is ready when using transferred images")
			Eventually(DeploymentIsReady).
				WithContext(ctx).
				WithArguments(skrClient, ModuleResourceName, TestModuleResourceNamespace).
				Should(Succeed())

			By("And Module Operator Deployment images are re-written according to the localizedImages provided in the Manifest CR")
			deployment, err := GetDeployment(ctx, skrClient, ModuleResourceName, TestModuleResourceNamespace)
			Expect(err).Should(Succeed())
			Expect(deployment.Spec.Template.Spec.Containers).ShouldNot(BeEmpty())
			Expect(deployment.Spec.Template.Spec.Containers[0].Image).Should(Equal(rewrittenTemplateOperatorImage))
			Expect(allEnvValuesIn(deployment)).Should(ConsistOf(rewrittenTelemetryManagerImage, rewrittenKedaManagerImage))
		})
	})
})
