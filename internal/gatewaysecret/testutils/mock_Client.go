// Code generated by mockery v2.53.3. DO NOT EDIT.

package testutils

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// CreateGatewaySecret provides a mock function with given fields: ctx, secret
func (_m *ClientMock) CreateGatewaySecret(ctx context.Context, secret *v1.Secret) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateGatewaySecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_CreateGatewaySecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGatewaySecret'
type ClientMock_CreateGatewaySecret_Call struct {
	*mock.Call
}

// CreateGatewaySecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret *v1.Secret
func (_e *ClientMock_Expecter) CreateGatewaySecret(ctx interface{}, secret interface{}) *ClientMock_CreateGatewaySecret_Call {
	return &ClientMock_CreateGatewaySecret_Call{Call: _e.mock.On("CreateGatewaySecret", ctx, secret)}
}

func (_c *ClientMock_CreateGatewaySecret_Call) Run(run func(ctx context.Context, secret *v1.Secret)) *ClientMock_CreateGatewaySecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Secret))
	})
	return _c
}

func (_c *ClientMock_CreateGatewaySecret_Call) Return(_a0 error) *ClientMock_CreateGatewaySecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_CreateGatewaySecret_Call) RunAndReturn(run func(context.Context, *v1.Secret) error) *ClientMock_CreateGatewaySecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewaySecret provides a mock function with given fields: ctx
func (_m *ClientMock) GetGatewaySecret(ctx context.Context) (*v1.Secret, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewaySecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1.Secret, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1.Secret); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetGatewaySecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewaySecret'
type ClientMock_GetGatewaySecret_Call struct {
	*mock.Call
}

// GetGatewaySecret is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClientMock_Expecter) GetGatewaySecret(ctx interface{}) *ClientMock_GetGatewaySecret_Call {
	return &ClientMock_GetGatewaySecret_Call{Call: _e.mock.On("GetGatewaySecret", ctx)}
}

func (_c *ClientMock_GetGatewaySecret_Call) Run(run func(ctx context.Context)) *ClientMock_GetGatewaySecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientMock_GetGatewaySecret_Call) Return(_a0 *v1.Secret, _a1 error) *ClientMock_GetGatewaySecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetGatewaySecret_Call) RunAndReturn(run func(context.Context) (*v1.Secret, error)) *ClientMock_GetGatewaySecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetWatcherServingCertValidity provides a mock function with given fields: ctx
func (_m *ClientMock) GetWatcherServingCertValidity(ctx context.Context) (time.Time, time.Time, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWatcherServingCertValidity")
	}

	var r0 time.Time
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, time.Time, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) time.Time); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClientMock_GetWatcherServingCertValidity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWatcherServingCertValidity'
type ClientMock_GetWatcherServingCertValidity_Call struct {
	*mock.Call
}

// GetWatcherServingCertValidity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClientMock_Expecter) GetWatcherServingCertValidity(ctx interface{}) *ClientMock_GetWatcherServingCertValidity_Call {
	return &ClientMock_GetWatcherServingCertValidity_Call{Call: _e.mock.On("GetWatcherServingCertValidity", ctx)}
}

func (_c *ClientMock_GetWatcherServingCertValidity_Call) Run(run func(ctx context.Context)) *ClientMock_GetWatcherServingCertValidity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientMock_GetWatcherServingCertValidity_Call) Return(_a0 time.Time, _a1 time.Time, _a2 error) *ClientMock_GetWatcherServingCertValidity_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClientMock_GetWatcherServingCertValidity_Call) RunAndReturn(run func(context.Context) (time.Time, time.Time, error)) *ClientMock_GetWatcherServingCertValidity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGatewaySecret provides a mock function with given fields: ctx, secret
func (_m *ClientMock) UpdateGatewaySecret(ctx context.Context, secret *v1.Secret) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewaySecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateGatewaySecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGatewaySecret'
type ClientMock_UpdateGatewaySecret_Call struct {
	*mock.Call
}

// UpdateGatewaySecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret *v1.Secret
func (_e *ClientMock_Expecter) UpdateGatewaySecret(ctx interface{}, secret interface{}) *ClientMock_UpdateGatewaySecret_Call {
	return &ClientMock_UpdateGatewaySecret_Call{Call: _e.mock.On("UpdateGatewaySecret", ctx, secret)}
}

func (_c *ClientMock_UpdateGatewaySecret_Call) Run(run func(ctx context.Context, secret *v1.Secret)) *ClientMock_UpdateGatewaySecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Secret))
	})
	return _c
}

func (_c *ClientMock_UpdateGatewaySecret_Call) Return(_a0 error) *ClientMock_UpdateGatewaySecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateGatewaySecret_Call) RunAndReturn(run func(context.Context, *v1.Secret) error) *ClientMock_UpdateGatewaySecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
