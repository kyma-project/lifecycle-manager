name: Deploy template-operator With ModuleReleaseMeta
description: Deploys a test-specific template-operator and corresponding ModuleReleaseMeta.
inputs:
  module_version:
    description: 'Version of the template operator to be deployed, should be aligned with the latest version released in github.'
    required: true
    default: '1.0.1'
runs:
  using: composite
  steps:
    - name: Setup HTTPS server for the manifest file
      uses: ./lifecycle-manager/.github/actions/setup-https-server
      with:
        directory_name: ../template-operator
    - name: Copy generate moduletemplate script to template-operator directory
      working-directory: template-operator
      shell: bash
      run: |
        cp ../lifecycle-manager/.github/scripts/release/generate_moduletemplate.sh .
        cp ../lifecycle-manager/.github/scripts/release/generate_modulereleasemeta.sh .
    - name: Create and apply Template Operator ModuleTemplate from the latest release
      working-directory: template-operator
      shell: bash
      run: |
        modulectl create --config-file ./module-config.yaml --registry http://localhost:5111 --insecure
        sed -i 's/localhost:5111/k3d-kcp-registry.localhost:5000/g' ./template.yaml
        kubectl get crds
        kubectl apply -f template.yaml
    - name: Create and apply Template Operator ModuleTemplate with ModuleDeploymentNameInOlderVersion
      working-directory: template-operator
      shell: bash
      run: |
        make build-manifests
        sed -i 's/template-operator-controller-manager/${{ env.ModuleDeploymentNameInOlderVersion }}/g' template-operator.yaml
        ./generate_moduletemplate.sh ${{ env.ModuleName }} ${{ env.OlderVersion }}
    - name: Create and apply Template Operator ModuleTemplate with ModuleDeploymentNameInNewerVersion
      working-directory: template-operator
      shell: bash
      run: |
        make build-manifests
        sed -i 's/template-operator-controller-manager/${{ env.ModuleDeploymentNameInNewerVersion }}/g' template-operator.yaml
        ./generate_moduletemplate.sh ${{ env.ModuleName }} ${{ env.NewerVersion }}
    - name: Create and apply Template Operator ModuleTemplate with StatefulSet, with final state and final deletion state as `Warning`
      working-directory: template-operator
      shell: bash
      run: |
        pushd config/overlays/statefulset
        echo \
        "- op: replace
          path: /spec/template/spec/containers/0/args/1
          value: --final-state=Warning
        - op: replace
          path: /spec/template/spec/containers/0/args/2
          value: --final-deletion-state=Warning" >> warning_patch.yaml
        cat warning_patch.yaml
        kustomize edit add patch --path warning_patch.yaml --kind StatefulSet
        popd
        make build-statefulset-manifests
        ./generate_moduletemplate.sh ${{ env.ModuleName }} ${{ env.VersionForStatefulSetInWarning }}
    - name: Create and apply Template Operator ModuleTemplate with Deployment, with final state and final deletion state as `Warning`
      working-directory: template-operator
      shell: bash
      run: |
        pushd config/overlays/deployment
        echo \
        "- op: replace
          path: /spec/template/spec/containers/0/args/1
          value: --final-state=Warning
        - op: replace
          path: /spec/template/spec/containers/0/args/2
          value: --final-deletion-state=Warning" >> warning_patch.yaml
        cat warning_patch.yaml
        kustomize edit add patch --path warning_patch.yaml --kind Deployment
        popd
        make build-manifests
        ./generate_moduletemplate.sh ${{ env.ModuleName }} ${{ env.VersionForDeploymentInWarning }}
    - name: Create and apply Template Operator Module with Deployment, with non-working image
      working-directory: template-operator
      shell: bash
      run: |
        pushd config/overlays/deployment
        echo \
        "- op: replace
          path: /spec/template/spec/containers/0/image
          value: non-working-path" >> image_patch.yaml
        cat image_patch.yaml
        kustomize edit add patch --path image_patch.yaml --kind Deployment
        popd
        make build-manifests
        ./generate_moduletemplate.sh ${{ env.MisconfiguredModuleName }} ${{ env.VersionForMisconfiguredDeploymentImage }}
    - name: Create and apply Template Operator Module with StatefulSet, with non-working image
      working-directory: template-operator
      shell: bash
      run: |
        pushd config/overlays/statefulset
        echo \
        "- op: replace
          path: /spec/template/spec/containers/0/image
          value: non-working-path" >> image_patch.yaml
        cat image_patch.yaml
        kustomize edit add patch --path image_patch.yaml --kind StatefulSet
        popd
        make build-statefulset-manifests
        ./generate_moduletemplate.sh ${{ env.MisconfiguredModuleName }} ${{ env.VersionForMisconfiguredStatefulSetImage }}
    - name: Create and apply Template Operator ModuleTemplate without default CR
      working-directory: template-operator
      shell: bash
      run: |
        make build-manifests
        ./generate_moduletemplate.sh ${{ env.ModuleName }} ${{ env.VersionForNoDefaultCR }} false
    - name: Create and apply ModuleReleaseMeta from the latest release
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'kyma-metrics' ||
        matrix.e2e-test == 'non-blocking-deletion' ||
        matrix.e2e-test == 'purge-controller' ||
        matrix.e2e-test == 'purge-metrics' ||
        matrix.e2e-test == 'kyma-deprovision-with-foreground-propagation' ||
        matrix.e2e-test == 'kyma-deprovision-with-background-propagation' ||
        matrix.e2e-test == 'module-consistency' ||
        matrix.e2e-test == 'skip-manifest-reconciliation' ||
        matrix.e2e-test == 'misconfigured-kyma-secret' ||
        matrix.e2e-test == 'unmanage-module' ||
        matrix.e2e-test == 'modulereleasemeta-watch-trigger'
        }}
      shell: bash
      run: |
        kubectl apply -f module-release-meta.yaml
    - name: Apply Template Operator Module and ModuleReleaseMeta for regular and fast channels
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-upgrade-channel-switch' ||
        matrix.e2e-test == 'modulereleasemeta-module-upgrade-new-version' ||
        matrix.e2e-test == 'modulereleasemeta-upgrade-under-deletion' ||
        matrix.e2e-test == 'modulereleasemeta-sync'
        }}
      shell: bash
      run: |
        ./generate_modulereleasemeta.sh ${{ env.ModuleName }} fast:${{ env.NewerVersion }} regular:${{ env.OlderVersion }}
    - name: Create Template Operator Module as Mandatory Module
      working-directory: lifecycle-manager
      if: ${{ matrix.e2e-test == 'mandatory-module' ||
        matrix.e2e-test == 'mandatory-module-metrics'
        }}
      shell: bash
      run: |
        kubectl apply -f tests/e2e/moduletemplate/mandatory_moduletemplate_template_operator_v1.yaml
    - name: Create and apply ModuleReleaseMeta Template Operator with newer version in fast channel and older version in regular channel
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'non-blocking-deletion' }}
      shell: bash
      run: |
        ./generate_modulereleasemeta.sh ${{ env.ModuleName }} fast:${{ env.NewerVersion }} regular:${{ inputs.module_version }}
    - name: Create and apply ModuleReleaseMeta with version when deployment is in warning state
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-status-decoupling-with-deployment'}}
      shell: bash
      run: |
        ./generate_modulereleasemeta.sh ${{ env.ModuleName }} regular:${{ env.VersionForDeploymentInWarning }}
    - name: Create and apply ModuleReleaseMeta with version when statefulset is in warning state
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-status-decoupling-with-statefulset'}}
      shell: bash
      run: |
        ./generate_modulereleasemeta.sh ${{ env.ModuleName }} regular:${{ env.VersionForStatefulSetInWarning }}
    - name: Create and apply ModuleReleaseMeta with version when deployment is misconfigured
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-status-decoupling-with-deployment'}}
      shell: bash
      run: |
        ./generate_modulereleasemeta.sh ${{ env.MisconfiguredModuleName }} regular:${{ env.VersionForMisconfiguredDeploymentImage }}
    - name: Create and apply ModuleReleaseMeta with version when statefulset is misconfigured
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-status-decoupling-with-statefulset'}}
      shell: bash
      run: |
        ./generate_modulereleasemeta.sh ${{ env.MisconfiguredModuleName }} regular:${{ env.VersionForMisconfiguredStatefulSetImage }}
    - name: Create Template Operator Module without default CR and apply ModuleReleaseMeta
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-without-default-cr' }}
      shell: bash
      run: |
        ./generate_modulereleasemeta.sh ${{ env.ModuleName }} regular:${{ env.VersionForNoDefaultCR }}
    - name: Apply ModuleReleaseMeta with ModuleTemplate with name <modulename>-<channel>
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'modulereleasemeta-with-obsolete-moduletemplate' }}
      shell: bash
      run: |
        modulectl create --config-file ./module-config.yaml --registry http://localhost:5111 --insecure
        sed -i 's/localhost:5111/k3d-kcp-registry.localhost:5000/g' ./template.yaml
        sed -i 's/template-operator-1.0.1/template-operator-regular/g' ./template.yaml
        kubectl apply -f template.yaml
        kubectl apply -f module-release-meta.yaml
