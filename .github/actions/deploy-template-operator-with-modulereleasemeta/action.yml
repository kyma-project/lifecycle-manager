name: Deploy template-operator With ModuleReleaseMeta
description: Deploys a test-specific template-operator and corresponding ModuleReleaseMeta.
inputs:
  module_version:
    description: 'Version of the template operator to be deployed, should be aligned with the latest version released in github.'
    required: true
    default: '1.0.1'
runs:
  using: composite
  steps:
    - name: Setup HTTPS server for the manifest file
      uses: ./lifecycle-manager/.github/actions/setup-https-server
      with:
        directory_name: ../template-operator
    - name: Copy generate moduletemplate script to template-operator directory
      working-directory: template-operator
      shell: bash
      run: |
        cp ../lifecycle-manager/.github/scripts/release/deploy_moduletemplate.sh .
        cp ../lifecycle-manager/.github/scripts/release/deploy_modulereleasemeta.sh .
    - name: Create and apply Template Operator ModuleTemplate from the latest release
      working-directory: template-operator
      shell: bash
      run: |
        modulectl create --config-file ./module-config.yaml --registry http://localhost:5111 --insecure
        sed -i 's/localhost:5111/k3d-kcp-registry.localhost:5000/g' ./template.yaml
        kubectl get crds
        kubectl apply -f template.yaml
    - name: Create and apply Template Operator ModuleTemplate with ModuleDeploymentNameInOlderVersion
      working-directory: template-operator
      shell: bash
      run: |
        make build-manifests
        yq eval '(. | select(.kind == "Deployment") | .metadata.name) = "${{ env.ModuleDeploymentNameInOlderVersion }}"' -i template-operator.yaml
        ./deploy_moduletemplate.sh ${{ env.ModuleName }} ${{ env.OlderVersion }}
    - name: Create and apply Template Operator ModuleTemplate with ModuleDeploymentNameInNewerVersion
      working-directory: template-operator
      shell: bash
      run: |
        make build-manifests
        yq eval '(. | select(.kind == "Deployment") | .metadata.name) = "${{ env.ModuleDeploymentNameInNewerVersion }}"' -i template-operator.yaml
        ./deploy_moduletemplate.sh ${{ env.ModuleName }} ${{ env.NewerVersion }}
    - name: Create and apply ModuleReleaseMeta from the latest release
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'kyma-metrics' ||
        matrix.e2e-test == 'non-blocking-deletion' ||
        matrix.e2e-test == 'purge-controller' ||
        matrix.e2e-test == 'purge-metrics' ||
        matrix.e2e-test == 'kyma-deprovision-with-foreground-propagation' ||
        matrix.e2e-test == 'kyma-deprovision-with-background-propagation' ||
        matrix.e2e-test == 'module-consistency' ||
        matrix.e2e-test == 'skip-manifest-reconciliation' ||
        matrix.e2e-test == 'misconfigured-kyma-secret' ||
        matrix.e2e-test == 'unmanage-module' ||
        matrix.e2e-test == 'modulereleasemeta-watch-trigger' ||
        matrix.e2e-test == 'modulereleasemeta-with-obsolete-moduletemplate'
        }}
      shell: bash
      run: |
        kubectl apply -f module-release-meta.yaml
    - name: Create and apply ModuleReleaseMeta for regular and fast channels
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-upgrade-channel-switch' ||
        matrix.e2e-test == 'modulereleasemeta-module-upgrade-new-version' ||
        matrix.e2e-test == 'modulereleasemeta-upgrade-under-deletion' ||
        matrix.e2e-test == 'modulereleasemeta-sync' ||
        matrix.e2e-test == 'module-status-on-skr-connection-lost'
        }}
      shell: bash
      run: |
        ./deploy_modulereleasemeta.sh ${{ env.ModuleName }} fast:${{ env.NewerVersion }} regular:${{ env.OlderVersion }}
    - name: Create Template Operator Module as Mandatory Module
      working-directory: lifecycle-manager
      if: ${{ matrix.e2e-test == 'mandatory-module' ||
        matrix.e2e-test == 'mandatory-module-metrics'
        }}
      shell: bash
      run: |
        kubectl apply -f tests/e2e/moduletemplate/mandatory_moduletemplate_template_operator_v1.yaml
    - name: Create and apply ModuleReleaseMeta Template Operator with newer version in fast channel and older version in regular channel
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'non-blocking-deletion' }}
      shell: bash
      run: |
        ./deploy_modulereleasemeta.sh ${{ env.ModuleName }} fast:${{ env.NewerVersion }} regular:${{ inputs.module_version }}
    - name: Create ModuleTemplate and MetaReleaseMeta for Module Status test with Deployment
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-status-decoupling-with-deployment'}}
      shell: bash
      run: |
        # Create and apply ModuleReleaseMeta with version when deployment is in warning state
        make build-manifests
        yq eval '(. | select(.kind == "Deployment") | .spec.template.spec.containers[0].args) = ["--leader-elect", "--final-state=Warning", "--final-deletion-state=Warning"]' -i template-operator.yaml
        ./deploy_moduletemplate.sh ${{ env.ModuleName }} ${{ env.VersionForDeploymentInWarning }}
        ./deploy_modulereleasemeta.sh ${{ env.ModuleName }} regular:${{ env.VersionForDeploymentInWarning }}
        
        # Create and apply ModuleReleaseMeta with version when deployment is misconfigured
        make build-manifests
        yq eval '(. | select(.kind == "Deployment") | .spec.template.spec.containers[0].image) = "non-working-path"' -i template-operator.yaml
        ./deploy_moduletemplate.sh ${{ env.MisconfiguredModuleName }} ${{ env.VersionForMisconfiguredDeploymentImage }}
        ./deploy_modulereleasemeta.sh ${{ env.MisconfiguredModuleName }} regular:${{ env.VersionForMisconfiguredDeploymentImage }}
    - name: Create ModuleTemplate and MetaReleaseMeta for Module Status test with StatefulSet
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-status-decoupling-with-statefulset'}}
      shell: bash
      run: |
        # Create and apply ModuleReleaseMeta with version when statefulset is in warning state
        make build-statefulset-manifests
        yq eval '(. | select(.kind == "StatefulSet") | .spec.template.spec.containers[0].args) = ["--leader-elect", "--final-state=Warning", "--final-deletion-state=Warning"]' -i template-operator.yaml
        ./deploy_moduletemplate.sh ${{ env.ModuleName }} ${{ env.VersionForStatefulSetInWarning }}
        ./deploy_modulereleasemeta.sh ${{ env.ModuleName }} regular:${{ env.VersionForStatefulSetInWarning }}
        
        # Create and apply ModuleReleaseMeta with version when statefulset is misconfigured
        make build-statefulset-manifests
        yq eval '(. | select(.kind == "StatefulSet") | .spec.template.spec.containers[0].image) = "non-working-path"' -i template-operator.yaml
        ./deploy_moduletemplate.sh ${{ env.MisconfiguredModuleName }} ${{ env.VersionForMisconfiguredStatefulSetImage }}
        ./deploy_modulereleasemeta.sh ${{ env.MisconfiguredModuleName }} regular:${{ env.VersionForMisconfiguredStatefulSetImage }}
    - name: Create Template Operator Module without default CR and apply ModuleReleaseMeta
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'module-without-default-cr' }}
      shell: bash
      run: |
        make build-manifests
        ./deploy_moduletemplate.sh ${{ env.ModuleName }} ${{ env.VersionForNoDefaultCR }} false
        ./deploy_modulereleasemeta.sh ${{ env.ModuleName }} regular:${{ env.VersionForNoDefaultCR }}
    - name: Apply ModuleReleaseMeta with ModuleTemplate with name <modulename>-<channel>
      working-directory: template-operator
      if: ${{ matrix.e2e-test == 'modulereleasemeta-with-obsolete-moduletemplate' }}
      shell: bash
      run: |
        # Export the existing ModuleTemplate
        kubectl get moduletemplate ${{ env.ModuleName }}-${{ inputs.module_version }} -n kcp-system -oyaml > template.yaml
        
        # Delete the ModuleTemplate in cluster with name <modulename>-<version>
        kubectl delete moduletemplate ${{ env.ModuleName }}-${{ inputs.module_version }} -n kcp-system
        
        # Create ModuleTemplate with name <modulename>-<channel>
        sed -i 's/${{ env.ModuleName }}-${{ inputs.module_version }}/template-operator-regular/g' ./template.yaml
        kubectl apply -f template.yaml
