name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  wait-for-img:
    name: "Wait for Image Build"
    runs-on: ubuntu-latest
    steps:
      - uses: autotelic/action-wait-for-status-check@v1
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Context for which we should look for the matching status
          statusName: ${{ (github.event_name == 'pull_request') && 'pull-build' || 'main-build' }}
          timeoutSeconds: 180
          intervalSeconds: 10
      - name: Exit If Failing Build Requirement
        if: steps.wait-for-build.outputs.state != 'success'
        run: |
          echo "Image build did not succeed, skipping Smoke Test!"
          exit 1

  kustomize:
    strategy:
      matrix:
        flavor: ["", "-control-plane"]
    name: "Kustomize (dry-run${{ matrix.flavor }})"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          cache: true
          go-version-file: 'operator/go.mod'
          cache-dependency-path: 'operator/go.sum'
      - run: cd operator && make dry-run${{ matrix.flavor }} IMG='*:latest'
      - name: Archive Manifests
        uses: actions/upload-artifact@v3
        with:
          retention-days: 5
          name: dry-run${{ matrix.flavor }}
          path: |
            operator/dry-run/*.yaml

  cli-integration:
    strategy:
      matrix:
        cli-stability: ["unstable"]
    needs: [wait-for-img, kustomize]
    name: "Kyma CLI Integration"
    runs-on: ubuntu-latest
    env:
      MODULE_MANAGER: kyma-project/module-manager
      LIFECYCLE_MANAGER: ${{ github.repository }}
    steps:
      - name: Checkout Lifecycle-Manager
        uses: actions/checkout@v3
        with:
          repository: ${{ env.LIFECYCLE_MANAGER }}
          path: ${{ env.LIFECYCLE_MANAGER }}
      - name: Move Lifecycle-Manager
        run: |
          mkdir -p $(go env GOPATH)/src/github.com/$LIFECYCLE_MANAGER
          mv $GITHUB_WORKSPACE/$LIFECYCLE_MANAGER/** $(go env GOPATH)/src/github.com/$LIFECYCLE_MANAGER/
      - name: Checkout Module-Manager
        uses: actions/checkout@v3
        with:
          repository: ${{ env.MODULE_MANAGER }}
          path: ${{ env.MODULE_MANAGER }}
          ref: main
      - name: Move Module-Manager
        run: |
          mkdir -p $(go env GOPATH)/src/github.com/$MODULE_MANAGER
          mv $GITHUB_WORKSPACE/$MODULE_MANAGER/** $(go env GOPATH)/src/github.com/$MODULE_MANAGER/
      - name: Override Kustomize Controller Image TAG in Pull Request to PR Image
        if: github.event_name == 'pull_request'
        run: |
          wget -qO - "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          mv kustomize /usr/local/bin/
          cd $(go env GOPATH)/src/github.com/$LIFECYCLE_MANAGER/operator/config/manager
          kustomize edit set image controller="*:PR-${{ github.event.pull_request.number }}"
      - name: Set up k3d
        run: wget -qO - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.6 bash
      - name: Set up CLI
        run: |
          wget -q https://storage.googleapis.com/kyma-cli-${{ matrix.cli-stability }}/kyma-linux
          chmod +x kyma-linux
          mv kyma-linux /usr/local/bin/kyma
      - name: Run Provision
        env:
          CLUSTER_NAME: "kyma"
        run: |
          kyma provision k3d \
            -p 8083:80@loadbalancer \
            -p 8443:443@loadbalancer \
            --timeout 1m \
            --k3d-arg --no-rollback \
            --name $CLUSTER_NAME
          k3d kubeconfig merge $CLUSTER_NAME -o $GITHUB_WORKSPACE/kubeconfig.yaml
      - name: Run Deploy
        run: kyma alpha deploy --source=local
      - name: Inject GOPATH into go Setup
        run: echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-cli-integration-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cli-integration-
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.GOPATH }}/src/github.com/${{ env.LIFECYCLE_MANAGER }}/tests/smoke/go.mod
          cache-dependency-path: ${{ env.GOPATH }}/src/github.com/${{ env.LIFECYCLE_MANAGER }}/tests/smoke/go.sum
      - name: Run Smoke Tests
        run: |
          cd $(go env GOPATH)/src/github.com/$LIFECYCLE_MANAGER/tests/smoke
          go test smoke_test.go -v -provision-type external --kubeconfig $GITHUB_WORKSPACE/kubeconfig.yaml

  smoke:
    needs: [wait-for-img, kustomize]
    name: "Smoke"
    strategy:
      matrix:
        os: [ubuntu-latest]
        provision-type: ["kyma-cli", "kind"]
        
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        cache: true
        go-version-file: 'tests/smoke/go.mod'
        cache-dependency-path: 'tests/smoke/go.sum'

    - name: Set up k3d/kyma for ${{ matrix.provision-type }}
      if: ${{ matrix.provision-type }} == "kyma-cli"
      run: |
        wget -qO - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.6 bash
        wget -q https://storage.googleapis.com/kyma-cli-unstable/kyma-linux
        chmod +x kyma-linux
        mv kyma-linux /usr/local/bin/kyma

    - name: Set up kustomize V4
      run: |
        wget -qO - "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        mv kustomize /usr/local/bin/

    - name: Override Kustomize Controller Image TAG in Pull Request to PR Image
      if: github.event_name == 'pull_request'
      run: |
        cd operator/config/manager
        kustomize edit set image controller="*:PR-${{ github.event.pull_request.number }}"

    - name: Run Smoke Tests
      run: cd tests/smoke && go test smoke_test.go -v -provision-type ${{ matrix.provision-type }}
