name: "Check API Version Compatibility"

permissions: { }

on:
  pull_request:
    branches:
      - main
      - feat/**

jobs:
  check-api-version-diff:
    name: Diff API Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout lifecycle-manager
        uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          sudo snap install dyff
      - name: Compare CRD Versions
        run: |
          set -e
          CONFIG_FILE=api-version-compatibility-config.yaml
          CRD_PATH=./config/crd/bases

          check_breaking_changes() {
            local older_file="$1"
            local newer_file="$2"
            local older_version="$3"
            local newer_version="$4"
            local crd_name="$5"

            echo "Checking for breaking changes between $older_version and $newer_version in $crd_name"

            # Check if older version has fields that newer version doesn't have
            # This would be a breaking change (field removed from newer version)
            local fields_removed=$(yq eval-all '
              (select(fileIndex == 0) | keys) - (select(fileIndex == 1) | keys)
            ' "$older_file" "$newer_file" | yq eval 'length')

            if [ "$fields_removed" -gt 0 ]; then
              echo "❌ BREAKING CHANGE: Fields removed in newer version $newer_version"
              yq eval-all '
                (select(fileIndex == 0) | keys) - (select(fileIndex == 1) | keys)
              ' "$older_file" "$newer_file"
              return 1
            fi

            # Check for type changes in existing fields
            local common_fields=$(yq eval-all '
              (select(fileIndex == 0) | keys) * (select(fileIndex == 1) | keys)
            ' "$older_file" "$newer_file")

            if [ "$common_fields" != "[]" ]; then
              echo "$common_fields" | yq eval '.[]' | while read -r field; do
                older_type=$(yq eval ".[\"$field\"].type // \"object\"" "$older_file")
                newer_type=$(yq eval ".[\"$field\"].type // \"object\"" "$newer_file")

                if [ "$older_type" != "$newer_type" ] && [ "$older_type" != "null" ] && [ "$newer_type" != "null" ]; then
                  echo "❌ BREAKING CHANGE: Field '$field' type changed from '$older_type' to '$newer_type'"
                  return 1
                fi
              done
            fi

            # Check for required fields added to newer version
            # This could be breaking if older clients don't provide them
            local older_required=$(yq eval 'keys | map(select(. != null))' "$older_file" 2>/dev/null || echo '[]')
            local newer_required=$(yq eval 'keys | map(select(. != null))' "$newer_file" 2>/dev/null || echo '[]')

            echo "✅ No breaking changes detected between $older_version and $newer_version"
            return 0
          }

          for file in $CRD_PATH/*.yaml; do
            filename=$(basename $file | sed 's/.yaml//')
            echo "Processing CRD: $filename"

            versions=$(yq e '.spec.versions[].name' "$file" | sort -V)
            versions=($versions)

            # Skip if less than 2 versions
            if [ ${#versions[@]} -lt 2 ]; then
              echo "Skipping $filename - only has ${#versions[@]} version(s)"
              continue
            fi

            # Compare each older version with each newer version
            for ((i=0; i<${#versions[@]}-1; i++)); do
              for ((j=i+1; j<${#versions[@]}; j++)); do
                older_version=${versions[i]}
                newer_version=${versions[j]}

                echo "Comparing $older_version (older) with $newer_version (newer)"

                # Get exclusions for both versions
                exclusions_older=$(yq e ".\"$(basename $file)\".exclusions.$older_version[]" $CONFIG_FILE 2>/dev/null || echo "")
                exclusions_newer=$(yq e ".\"$(basename $file)\".exclusions.$newer_version[]" $CONFIG_FILE 2>/dev/null || echo "")

                # Extract schema properties for older version
                yq e ".spec.versions.[] | select(.name == \"$older_version\") | .schema.openAPIV3Schema.properties" "$file" > "${filename}_${older_version}.yaml"
                for exclusion in $exclusions_older; do
                  if [ -n "$exclusion" ]; then
                    yq e "del($exclusion)" -i "${filename}_${older_version}.yaml"
                  fi
                done

                # Extract schema properties for newer version
                yq e ".spec.versions.[] | select(.name == \"$newer_version\") | .schema.openAPIV3Schema.properties" "$file" > "${filename}_${newer_version}.yaml"
                for exclusion in $exclusions_newer; do
                  if [ -n "$exclusion" ]; then
                    yq e "del($exclusion)" -i "${filename}_${newer_version}.yaml"
                  fi
                done

                # Check for breaking changes
                if ! check_breaking_changes "${filename}_${older_version}.yaml" "${filename}_${newer_version}.yaml" "$older_version" "$newer_version" "$filename"; then
                  echo "❌ Breaking change detected in $file between versions $older_version and $newer_version"
                  echo "To add an exclusion, update $CONFIG_FILE with the necessary exclusions."
                  exit 1
                fi

                # Clean up temporary files
                rm -f "${filename}_${older_version}.yaml" "${filename}_${newer_version}.yaml"
              done
            done
          done

          echo "✅ All API compatibility checks passed!"
