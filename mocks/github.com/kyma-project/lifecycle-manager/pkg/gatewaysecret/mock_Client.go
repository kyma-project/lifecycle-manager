// Code generated by mockery v2.50.0. DO NOT EDIT.

package gatewaysecret

import (
	context "context"

	certmanagerv1 "github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreateGatewaySecret provides a mock function with given fields: ctx, secret
func (_m *MockClient) CreateGatewaySecret(ctx context.Context, secret *v1.Secret) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateGatewaySecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateGatewaySecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGatewaySecret'
type MockClient_CreateGatewaySecret_Call struct {
	*mock.Call
}

// CreateGatewaySecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret *v1.Secret
func (_e *MockClient_Expecter) CreateGatewaySecret(ctx interface{}, secret interface{}) *MockClient_CreateGatewaySecret_Call {
	return &MockClient_CreateGatewaySecret_Call{Call: _e.mock.On("CreateGatewaySecret", ctx, secret)}
}

func (_c *MockClient_CreateGatewaySecret_Call) Run(run func(ctx context.Context, secret *v1.Secret)) *MockClient_CreateGatewaySecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Secret))
	})
	return _c
}

func (_c *MockClient_CreateGatewaySecret_Call) Return(_a0 error) *MockClient_CreateGatewaySecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateGatewaySecret_Call) RunAndReturn(run func(context.Context, *v1.Secret) error) *MockClient_CreateGatewaySecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewaySecret provides a mock function with given fields: ctx
func (_m *MockClient) GetGatewaySecret(ctx context.Context) (*v1.Secret, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewaySecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1.Secret, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1.Secret); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetGatewaySecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewaySecret'
type MockClient_GetGatewaySecret_Call struct {
	*mock.Call
}

// GetGatewaySecret is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetGatewaySecret(ctx interface{}) *MockClient_GetGatewaySecret_Call {
	return &MockClient_GetGatewaySecret_Call{Call: _e.mock.On("GetGatewaySecret", ctx)}
}

func (_c *MockClient_GetGatewaySecret_Call) Run(run func(ctx context.Context)) *MockClient_GetGatewaySecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetGatewaySecret_Call) Return(_a0 *v1.Secret, _a1 error) *MockClient_GetGatewaySecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetGatewaySecret_Call) RunAndReturn(run func(context.Context) (*v1.Secret, error)) *MockClient_GetGatewaySecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetWatcherServingCert provides a mock function with given fields: ctx
func (_m *MockClient) GetWatcherServingCert(ctx context.Context) (*certmanagerv1.Certificate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWatcherServingCert")
	}

	var r0 *certmanagerv1.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*certmanagerv1.Certificate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *certmanagerv1.Certificate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certmanagerv1.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetWatcherServingCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWatcherServingCert'
type MockClient_GetWatcherServingCert_Call struct {
	*mock.Call
}

// GetWatcherServingCert is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetWatcherServingCert(ctx interface{}) *MockClient_GetWatcherServingCert_Call {
	return &MockClient_GetWatcherServingCert_Call{Call: _e.mock.On("GetWatcherServingCert", ctx)}
}

func (_c *MockClient_GetWatcherServingCert_Call) Run(run func(ctx context.Context)) *MockClient_GetWatcherServingCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetWatcherServingCert_Call) Return(_a0 *certmanagerv1.Certificate, _a1 error) *MockClient_GetWatcherServingCert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetWatcherServingCert_Call) RunAndReturn(run func(context.Context) (*certmanagerv1.Certificate, error)) *MockClient_GetWatcherServingCert_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGatewaySecret provides a mock function with given fields: ctx, secret
func (_m *MockClient) UpdateGatewaySecret(ctx context.Context, secret *v1.Secret) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewaySecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_UpdateGatewaySecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGatewaySecret'
type MockClient_UpdateGatewaySecret_Call struct {
	*mock.Call
}

// UpdateGatewaySecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret *v1.Secret
func (_e *MockClient_Expecter) UpdateGatewaySecret(ctx interface{}, secret interface{}) *MockClient_UpdateGatewaySecret_Call {
	return &MockClient_UpdateGatewaySecret_Call{Call: _e.mock.On("UpdateGatewaySecret", ctx, secret)}
}

func (_c *MockClient_UpdateGatewaySecret_Call) Run(run func(ctx context.Context, secret *v1.Secret)) *MockClient_UpdateGatewaySecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Secret))
	})
	return _c
}

func (_c *MockClient_UpdateGatewaySecret_Call) Return(_a0 error) *MockClient_UpdateGatewaySecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_UpdateGatewaySecret_Call) RunAndReturn(run func(context.Context, *v1.Secret) error) *MockClient_UpdateGatewaySecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
